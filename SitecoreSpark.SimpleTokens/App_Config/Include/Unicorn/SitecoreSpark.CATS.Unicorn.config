<!--
	Unicorn.Configs.Default.config

	This is an example of how to configure a basic Unicorn configuration using your own config patch file.
	Copy this file to use as a basis for your own configuration definitions.

	Enabled configuration definition patches should be present on all environments Unicorn is present on.

	See Unicorn.config for commentary on how configurations operate, or https://github.com/kamsar/Unicorn/blob/master/README.md
-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<sitecore>
		<unicorn>
			<configurations>
				<!--
					The default configuration is an example to start making other configurations from.

					WHAT SHOULD I INCLUDE?
					In general, include the fewest items possible. This both makes things faster and reduces the amount of things kept in source control.
					The most common candidates for serialization are layout items and template items, but Unicorn can serialize any type of item or field including media.
					
					BEHAVIORS
					Configurations can override the default dependency types defined in Unicorn.config's <defaults> to apply
					custom behaviors to specific configurations. 
					
					If no 'type' attribute is specified, the default dependency type is inherited (e.g. Unicorn.Predicates.SerializationPresetPredicate for a predicate).
					Attributes set on a type-less dependency are added or replace those on the base type (e.g. setting transparent sync to on/off without specifying a type).
					Child elements of a type-less dependency are appended to any defined on the base (e.g. you can add includes to a predicate using this).
					Specifying a type attribute completely overwrites any definitions made in a parent configuration.
					
					DEPENDENCIES
					Configurations may also depend on each other. Add a comma-delimited list of configuration names to depend on to the 'dependencies' attribute on the configuration.
					Dependent configurations do not force dependencies to sync if not selected, but syncs will always occur in dependency order if multiple dependent configurations sync at once.
					Transitive dependency and multiple dependency (comma delimited) are supported.
					
					TIPS
					Favor using several configurations over a single monolithic one.
					Favor using more includes and fewer excludes in your predicates.
					Start with minimal configurations and add includes as you need to serialize new things.
					If you're using a convention-based system like Helix, you can create a base configuration that encodes your conventions using variables,
						for example <include path="/sitecore/templates/$(layer)/$(module)" /> on the predicate. The base configuration will have 'abstract="true"' on the root element, and
						inheritors will have 'extends="AbstractConfigName"' on their root element.
				-->
				<configuration name="CATS - Module Configuration" description="CATS module Sitecore configuration items (templates, modules).">
					<predicate>
            
						<include name="Templates" database="master" path="/sitecore/templates/Content Author Tokens" />
						<include name ="Modules" database="master" path="/sitecore/system/Modules/Content Author Tokens" />
					</predicate>
					
					<dataProviderConfiguration enableTransparentSync="false" />

					<syncConfiguration updateLinkDatabase="false" updateSearchIndex="false" />
				</configuration>
			</configurations>
		</unicorn>
	</sitecore>
</configuration>
